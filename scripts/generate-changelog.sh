#!/bin/bash

# üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä CHANGELOG
# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç git –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π changelog

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CHANGELOG...${NC}"

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
echo -e "${BLUE}üìå –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${CURRENT_VERSION}${NC}"

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
NEW_VERSION="v$(date +%Y.%m.%d)"
echo -e "${BLUE}üÜï –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${NEW_VERSION}${NC}"

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
if git describe --tags --abbrev=0 >/dev/null 2>&1; then
    COMMITS=$(git log ${CURRENT_VERSION}..HEAD --oneline --no-merges)
else
    COMMITS=$(git log --oneline --no-merges)
fi

if [ -z "$COMMITS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞${NC}"
    exit 0
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö
analyze_file_changes() {
    local hash="$1"
    local changes=""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–º–º–∏—Ç–µ
    local files=$(git show --name-only --format="" "$hash")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    if echo "$files" | grep -q "app\.py"; then
        changes="${changes} Backend"
    fi
    if echo "$files" | grep -q "templates/"; then
        changes="${changes} UI"
    fi
    if echo "$files" | grep -q "static/.*\.css"; then
        changes="${changes} Styles"
    fi
    if echo "$files" | grep -q "static/.*\.js"; then
        changes="${changes} JavaScript"
    fi
    if echo "$files" | grep -q "\.github/workflows/"; then
        changes="${changes} CI/CD"
    fi
    if echo "$files" | grep -q "test"; then
        changes="${changes} Tests"
    fi
    if echo "$files" | grep -q "\.md$"; then
        changes="${changes} Docs"
    fi
    if echo "$files" | grep -q "requirements\.txt\|Dockerfile"; then
        changes="${changes} Build"
    fi
    if echo "$files" | grep -q "\.sh$"; then
        changes="${changes} Scripts"
    fi
    
    echo "$changes"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–º–∏—Ç–∞
get_commit_stats() {
    local hash="$1"
    local stats=$(git show --stat --format="" "$hash" | tail -1)
    echo "$stats"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤
categorize_commits() {
    local commits="$1"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    FEATURES=""
    FIXES=""
    STYLES=""
    DOCS=""
    TESTS=""
    CI=""
    CHORES=""
    OTHERS=""
    MANAGEMENT=""
    WEBSOCKET=""
    SECURITY=""
    
    while IFS= read -r commit; do
        if [ -z "$commit" ]; then continue; fi
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        HASH=$(echo "$commit" | awk '{print $1}')
        MESSAGE=$(echo "$commit" | cut -d' ' -f2-)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        FILE_CHANGES=$(analyze_file_changes "$HASH")
        COMMIT_STATS=$(get_commit_stats "$HASH")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        EXTENDED_MESSAGE="$MESSAGE"
        if [ -n "$FILE_CHANGES" ]; then
            EXTENDED_MESSAGE="$MESSAGE [$FILE_CHANGES]"
        fi
        if [ -n "$COMMIT_STATS" ]; then
            EXTENDED_MESSAGE="$EXTENDED_MESSAGE ($COMMIT_STATS)"
        fi
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
        case "$MESSAGE" in
            feat:*|feature:*)
                FEATURES="${FEATURES}\n- ${EXTENDED_MESSAGE#*: } \`${HASH}\`"
                ;;
            fix:*|bugfix:*)
                FIXES="${FIXES}\n- ${EXTENDED_MESSAGE#*: } \`${HASH}\`"
                ;;
            style:*|ui:*|ux:*)
                STYLES="${STYLES}\n- ${EXTENDED_MESSAGE#*: } \`${HASH}\`"
                ;;
            docs:*|doc:*)
                DOCS="${DOCS}\n- ${EXTENDED_MESSAGE#*: } \`${HASH}\`"
                ;;
            test:*|tests:*)
                TESTS="${TESTS}\n- ${EXTENDED_MESSAGE#*: } \`${HASH}\`"
                ;;
            ci:*|build:*)
                CI="${CI}\n- ${EXTENDED_MESSAGE#*: } \`${HASH}\`"
                ;;
            chore:*|refactor:*)
                CHORES="${CHORES}\n- ${EXTENDED_MESSAGE#*: } \`${HASH}\`"
                ;;
            *)
                # –ü—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                if echo "$MESSAGE" | grep -qi "websocket\|socket\.io\|live.update"; then
                    WEBSOCKET="${WEBSOCKET}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                elif echo "$MESSAGE" | grep -qi "start_app\|stop_app\|status_app\|—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"; then
                    MANAGEMENT="${MANAGEMENT}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                elif echo "$MESSAGE" | grep -qi "security\|auth\|session\|login"; then
                    SECURITY="${SECURITY}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                elif echo "$MESSAGE" | grep -qi "fix\|bug\|error\|–∏—Å–ø—Ä–∞–≤"; then
                    FIXES="${FIXES}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                elif echo "$MESSAGE" | grep -qi "add\|new\|feature\|implement\|–¥–æ–±–∞–≤\|–Ω–æ–≤—ã–π"; then
                    FEATURES="${FEATURES}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                elif echo "$MESSAGE" | grep -qi "style\|css\|ui\|ux\|design\|theme\|—Å—Ç–∏–ª"; then
                    STYLES="${STYLES}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                elif echo "$MESSAGE" | grep -qi "doc\|readme\|guide\|–¥–æ–∫—É–º–µ–Ω—Ç"; then
                    DOCS="${DOCS}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                elif echo "$MESSAGE" | grep -qi "test\|—Ç–µ—Å—Ç"; then
                    TESTS="${TESTS}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                elif echo "$MESSAGE" | grep -qi "workflow\|ci\|build\|github.action"; then
                    CI="${CI}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                else
                    OTHERS="${OTHERS}\n- ${EXTENDED_MESSAGE} \`${HASH}\`"
                fi
                ;;
        esac
    done <<< "$COMMITS"
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã
categorize_commits "$COMMITS"

# –°–æ–∑–¥–∞–µ–º CHANGELOG
CHANGELOG_CONTENT="# üìã CHANGELOG

## [${NEW_VERSION}] - $(date +%Y-%m-%d)

### üéØ –û–±–∑–æ—Ä —Ä–µ–ª–∏–∑–∞
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ git –∏—Å—Ç–æ—Ä–∏–∏.
"

# –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
if [ -n "$FEATURES" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### ‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
${FEATURES}"
fi

if [ -n "$WEBSOCKET" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### ‚ö° WebSocket –∏ Live Updates
${WEBSOCKET}"
fi

if [ -n "$MANAGEMENT" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
${MANAGEMENT}"
fi

if [ -n "$SECURITY" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
${SECURITY}"
fi

if [ -n "$FIXES" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
${FIXES}"
fi

if [ -n "$STYLES" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üé® UI/UX —É–ª—É—á—à–µ–Ω–∏—è
${STYLES}"
fi

if [ -n "$DOCS" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
${DOCS}"
fi

if [ -n "$TESTS" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üß™ –¢–µ—Å—Ç—ã
${TESTS}"
fi

if [ -n "$CI" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üîß CI/CD –∏ —Å–±–æ—Ä–∫–∞
${CI}"
fi

if [ -n "$CHORES" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üè† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
${CHORES}"
fi

if [ -n "$OTHERS" ]; then
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üì¶ –î—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
${OTHERS}"
fi

# –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
COMMIT_COUNT=$(echo "$COMMITS" | wc -l)

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
FEATURE_COUNT=$(echo -e "$FEATURES" | grep -c "^-" 2>/dev/null || echo "0")
FIX_COUNT=$(echo -e "$FIXES" | grep -c "^-" 2>/dev/null || echo "0")
STYLE_COUNT=$(echo -e "$STYLES" | grep -c "^-" 2>/dev/null || echo "0")
DOC_COUNT=$(echo -e "$DOCS" | grep -c "^-" 2>/dev/null || echo "0")
TEST_COUNT=$(echo -e "$TESTS" | grep -c "^-" 2>/dev/null || echo "0")
CI_COUNT=$(echo -e "$CI" | grep -c "^-" 2>/dev/null || echo "0")
WEBSOCKET_COUNT=$(echo -e "$WEBSOCKET" | grep -c "^-" 2>/dev/null || echo "0")
MANAGEMENT_COUNT=$(echo -e "$MANAGEMENT" | grep -c "^-" 2>/dev/null || echo "0")

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞
if git describe --tags --abbrev=0 >/dev/null 2>&1; then
    CODE_STATS=$(git diff --stat ${CURRENT_VERSION}..HEAD | tail -1)
else
    CODE_STATS=$(git log --stat --oneline | tail -1)
fi

CHANGELOG_CONTENT="${CHANGELOG_CONTENT}

### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ª–∏–∑–∞
- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤**: ${COMMIT_COUNT}
- **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**: ${FEATURE_COUNT}
- **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è**: ${FIX_COUNT}
- **UI/UX —É–ª—É—á—à–µ–Ω–∏—è**: ${STYLE_COUNT}
- **WebSocket —Ñ—É–Ω–∫—Ü–∏–∏**: ${WEBSOCKET_COUNT}
- **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º**: ${MANAGEMENT_COUNT}
- **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: ${DOC_COUNT}
- **–¢–µ—Å—Ç—ã**: ${TEST_COUNT}
- **CI/CD**: ${CI_COUNT}

### üìà –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ
\`\`\`
${CODE_STATS}
\`\`\`

### üè∑Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ
- **–í–µ—Ä—Å–∏—è**: ${NEW_VERSION}
- **–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞**: $(date +%Y-%m-%d)
- **–í—Ä–µ–º—è —Ä–µ–ª–∏–∑–∞**: $(date +%H:%M:%S)
- **–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è**: ${CURRENT_VERSION}

---
"

# –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ä—ã–π CHANGELOG, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É
if [ -f "CHANGELOG.md" ]; then
    # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–π changelog (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    OLD_CHANGELOG=$(tail -n +2 CHANGELOG.md)
    CHANGELOG_CONTENT="${CHANGELOG_CONTENT}${OLD_CHANGELOG}"
fi

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π CHANGELOG
echo -e "$CHANGELOG_CONTENT" > CHANGELOG.md

echo -e "${GREEN}‚úÖ CHANGELOG.md –æ–±–Ω–æ–≤–ª–µ–Ω!${NC}"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
echo -e "${YELLOW}üìã –ü—Ä–µ–≤—å—é CHANGELOG:${NC}"
head -30 CHANGELOG.md

# –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥ –∏ —Ä–µ–ª–∏–∑
read -p "üè∑Ô∏è –°–æ–∑–¥–∞—Ç—å git —Ç–µ–≥ ${NEW_VERSION}? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION

$(echo -e "$CHANGELOG_CONTENT" | head -20)"
    
    echo -e "${GREEN}‚úÖ –¢–µ–≥ ${NEW_VERSION} —Å–æ–∑–¥–∞–Ω!${NC}"
    
    read -p "üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–≥ –≤ GitHub? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git push origin "$NEW_VERSION"
        echo -e "${GREEN}üéâ –¢–µ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! GitHub Release –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.${NC}"
    fi
fi