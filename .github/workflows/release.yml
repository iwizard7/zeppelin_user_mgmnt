name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create distribution
      run: |
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—Ä—Ö–∏–≤–∞
        mkdir -p dist
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, –∏—Å–∫–ª—é—á–∞—è –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã
        tar -czf dist/zeppelin-user-management-${{ github.ref_name }}.tar.gz \
          --exclude='.git*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.venv' \
          --exclude='logs' \
          --exclude='dist' \
          --exclude='.pytest_cache' \
          --exclude='*.log' \
          --exclude='*.backup' \
          --exclude='.app_pid' \
          --warning=no-file-changed \
          --warning=no-file-removed \
          .
    
    - name: Generate smart changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## üöÄ Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### üìÖ Release Date: $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
        if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          COMMITS=$(git log ${PREV_TAG}..HEAD --oneline --no-merges)
        else
          # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–µ–≥, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–º–∏—Ç–æ–≤
          COMMITS=$(git log --oneline --no-merges -10)
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–º–∏—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
        if [ -z "$COMMITS" ]; then
          echo "### üì¶ Initial Release" >> $GITHUB_OUTPUT
          echo "- First release of Zeppelin User Management" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
        else
        
          # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã
          FEATURES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ (feat|feature):" || true)
          FIXES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ (fix|bugfix):" || true)
          STYLES=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ (style|ui|ux):" || true)
          DOCS=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ (docs|doc):" || true)
          CI=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ (ci|build):" || true)
          OTHERS=$(echo "$COMMITS" | grep -vE "^[a-f0-9]+ (feat|feature|fix|bugfix|style|ui|ux|docs|doc|ci|build):" || true)
          
          # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          if [ -n "$FEATURES" ]; then
            echo "### ‚ú® New Features" >> $GITHUB_OUTPUT
            echo "$FEATURES" | sed 's/^[a-f0-9]* /- /' | sed 's/^- [^:]*: /- /' >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$FIXES" ]; then
            echo "### üêõ Bug Fixes" >> $GITHUB_OUTPUT
            echo "$FIXES" | sed 's/^[a-f0-9]* /- /' | sed 's/^- [^:]*: /- /' >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$STYLES" ]; then
            echo "### üé® UI/UX Improvements" >> $GITHUB_OUTPUT
            echo "$STYLES" | sed 's/^[a-f0-9]* /- /' | sed 's/^- [^:]*: /- /' >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$DOCS" ]; then
            echo "### üìö Documentation" >> $GITHUB_OUTPUT
            echo "$DOCS" | sed 's/^[a-f0-9]* /- /' | sed 's/^- [^:]*: /- /' >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$CI" ]; then
            echo "### üîß CI/CD & Build" >> $GITHUB_OUTPUT
            echo "$CI" | sed 's/^[a-f0-9]* /- /' | sed 's/^- [^:]*: /- /' >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$OTHERS" ]; then
            echo "### üì¶ Other Changes" >> $GITHUB_OUTPUT
            echo "$OTHERS" | sed 's/^[a-f0-9]* /- /' >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
        
          # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          COMMIT_COUNT=$(echo "$COMMITS" | wc -l)
          echo "### üìä Statistics" >> $GITHUB_OUTPUT
          echo "- **Commits**: $COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "- **Release Date**: $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
        fi
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          # Zeppelin User Management ${{ github.ref_name }}
          
          ## üöÄ Features
          - Modern web interface for Apache Zeppelin user management
          - Real-time service monitoring and control
          - Dark/Light theme support
          - Advanced user search and filtering
          - Cross-platform support (Linux/macOS)
          
          ## üì¶ Installation
          
          ### Docker (Recommended)
          ```bash
          docker run -d -p 8080:5000 ghcr.io/iwizard7/zeppelin_user_mgmnt:${{ github.ref_name }}
          ```
          
          ### Manual Installation
          1. Download and extract the source code
          2. Install dependencies: `pip install -r requirements.txt`
          3. Run: `python app.py`
          
          ## üìã Changelog
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## üîó Links
          - [Documentation](https://github.com/iwizard7/zeppelin_user_mgmnt#readme)
          - [Docker Image](https://ghcr.io/iwizard7/zeppelin_user_mgmnt)
          - [Issues](https://github.com/iwizard7/zeppelin_user_mgmnt/issues)
        files: |
          dist/zeppelin-user-management-${{ github.ref_name }}.tar.gz
        draft: false
        prerelease: false